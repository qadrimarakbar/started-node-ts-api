services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: nodejs-api-mysql-dev
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: node_api_db
      MYSQL_USER: apiuser
      MYSQL_PASSWORD: apipassword
    ports:
      - '3307:3306'
    volumes:
      - mysql_dev_data:/var/lib/mysql
    networks:
      - nodejs-api-dev-network
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost']
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 40s

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: nodejs-api-mongodb-dev
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: adminpassword
      MONGO_INITDB_DATABASE: node_api_mongo_db_dev
    ports:
      - '27017:27017'
    volumes:
      - mongodb_dev_data:/data/db
      - mongodb_dev_config:/data/configdb
    networks:
      - nodejs-api-dev-network
    healthcheck:
      test: ['CMD', 'mongosh', '--eval', 'db.adminCommand("ping")']
      timeout: 10s
      retries: 5
      interval: 10s
      start_period: 40s

  # Node.js API Application (Development)
  api-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: nodejs-api-dev
    restart: unless-stopped
    env_file:
      - .env
    environment:
      # Override untuk Docker Development
      NODE_ENV: development
      DB_HOST: mysql
      DB_USER: apiuser
      DB_PASSWORD: apipassword
      MONGODB_URI: mongodb://admin:adminpassword@mongodb:27017/node_api_mongo_db?authSource=admin
      MONGODB_HOST: mongodb
      MONGODB_PASSWORD: adminpassword
      MONGODB_DATABASE: node_api_mongo_db_dev

      # CORS
      CORS_ORIGIN: http://localhost:3000,http://localhost:3001
      CORS_METHODS: GET,POST,PUT,DELETE,PATCH
      CORS_ALLOWED_HEADERS: Content-Type,Authorization
      CORS_CREDENTIALS: true
      CORS_MAX_AGE: 86400
    ports:
      - '3000:3000'
    volumes:
      - .:/app # Mount source code untuk hot reload
      - /app/node_modules # Exclude node_modules
      - ./logs:/app/logs # Mount logs directory
    depends_on:
      mysql:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - nodejs-api-dev-network

  # Mongo Express untuk MongoDB management
  mongo-express:
    image: mongo-express:1.0.2
    container_name: nodejs-api-mongo-express-dev
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: adminpassword
      ME_CONFIG_MONGODB_URL: mongodb://admin:adminpassword@mongodb:27017/
      ME_CONFIG_BASICAUTH: false
    ports:
      - '8081:8081'
    depends_on:
      - mongodb
    networks:
      - nodejs-api-dev-network

  # Adminer untuk database management
  adminer:
    image: adminer:4
    container_name: nodejs-api-adminer-dev
    restart: unless-stopped
    ports:
      - '8080:8080'
    depends_on:
      - mysql
    networks:
      - nodejs-api-dev-network
    environment:
      ADMINER_DEFAULT_SERVER: mysql

volumes:
  mysql_dev_data:
    driver: local
  mongodb_dev_data:
    driver: local
  mongodb_dev_config:
    driver: local

networks:
  nodejs-api-dev-network:
    driver: bridge
