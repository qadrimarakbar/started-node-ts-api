services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: nodejs-api-mysql-dev
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: node_api_db
      MYSQL_USER: apiuser
      MYSQL_PASSWORD: apipassword
    ports:
      - '3307:3306'
    volumes:
      - mysql_dev_data:/var/lib/mysql
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    networks:
      - nodejs-api-dev-network
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost']
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 40s

  # Node.js API Application (Development)
  api-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: nodejs-api-dev
    restart: unless-stopped
    environment:
      # Application
      NODE_ENV: development
      PORT: 3000

      # JWT
      JWT_SECRET: dev-jwt-secret-key

      # Database
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USER: apiuser
      DB_PASSWORD: apipassword
      DB_NAME: node_api_db

      # CORS
      CORS_ORIGIN: http://localhost:3000,http://localhost:3001
      CORS_METHODS: GET,POST,PUT,DELETE,PATCH
      CORS_ALLOWED_HEADERS: Content-Type,Authorization
      CORS_CREDENTIALS: true
      CORS_MAX_AGE: 86400
    ports:
      - '3000:3000'
    volumes:
      - .:/app # Mount source code untuk hot reload
      - /app/node_modules # Exclude node_modules
      - ./logs:/app/logs # Mount logs directory
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - nodejs-api-dev-network

  # Adminer untuk database management
  adminer:
    image: adminer:4
    container_name: nodejs-api-adminer-dev
    restart: unless-stopped
    ports:
      - '8080:8080'
    depends_on:
      - mysql
    networks:
      - nodejs-api-dev-network
    environment:
      ADMINER_DEFAULT_SERVER: mysql

volumes:
  mysql_dev_data:
    driver: local

networks:
  nodejs-api-dev-network:
    driver: bridge
