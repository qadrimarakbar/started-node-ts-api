services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: nodejs-api-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: node_api_db
      MYSQL_USER: apiuser
      MYSQL_PASSWORD: apipassword
    ports:
      - '3307:3306' # Map ke port 3307 di host untuk avoid conflict
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    networks:
      - nodejs-api-network
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost']
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 40s

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: nodejs-api-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: adminpassword
      MONGO_INITDB_DATABASE: node_api_mongo_db
    ports:
      - '27017:27017'
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - nodejs-api-network
    healthcheck:
      test: ['CMD', 'mongosh', '--eval', 'db.adminCommand("ping")']
      timeout: 10s
      retries: 5
      interval: 10s
      start_period: 40s

  # Node.js API Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: nodejs-api
    restart: unless-stopped
    env_file:
      - .env
    environment:
      # Override untuk Docker
      DB_HOST: mysql
      DB_USER: apiuser
      DB_PASSWORD: apipassword
      MONGODB_URI: mongodb://admin:adminpassword@mongodb:27017/node_api_mongo_db?authSource=admin
      MONGODB_HOST: mongodb
      MONGODB_USER: admin
      MONGODB_PASSWORD: adminpassword
      MONGODB_DATABASE: node_api_mongo_db

      # CORS
      CORS_ORIGIN: http://localhost:3000,http://localhost:3001
      CORS_METHODS: GET,POST,PUT,DELETE,PATCH
      CORS_ALLOWED_HEADERS: Content-Type,Authorization
      CORS_CREDENTIALS: true
      CORS_MAX_AGE: 86400
    ports:
      - '3000:3000'
    volumes:
      - ./logs:/app/logs # Mount logs directory
    depends_on:
      mysql:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - nodejs-api-network
    healthcheck:
      test:
        [
          'CMD',
          'node',
          '-e',
          "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })",
        ]
      timeout: 10s
      retries: 3
      interval: 30s
      start_period: 10s

  # Mongo Express untuk MongoDB management (optional)
  mongo-express:
    image: mongo-express:1.0.2
    container_name: nodejs-api-mongo-express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: adminpassword
      ME_CONFIG_MONGODB_URL: mongodb://admin:adminpassword@mongodb:27017/
      ME_CONFIG_BASICAUTH: false
    ports:
      - '8081:8081'
    depends_on:
      - mongodb
    networks:
      - nodejs-api-network

  # Adminer untuk database management (optional)
  adminer:
    image: adminer:4
    container_name: nodejs-api-adminer
    restart: unless-stopped
    ports:
      - '8080:8080'
    depends_on:
      - mysql
    networks:
      - nodejs-api-network
    environment:
      ADMINER_DEFAULT_SERVER: mysql

volumes:
  mysql_data:
    driver: local
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local

networks:
  nodejs-api-network:
    driver: bridge
